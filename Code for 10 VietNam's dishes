from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.models import load_model
import matplotlib.pyplot as plt
import numpy as np
from keras.utils                  import np_utils
from keras.datasets               import cifar10
from keras.utils                  import np_utils
from keras.models                 import Sequential
from keras.layers                 import Dense, Activation, BatchNormalization, Dropout, LSTM
from keras.layers                 import Conv2D
from keras.layers                 import MaxPooling2D
from keras.layers                 import Flatten
from keras.callbacks              import EarlyStopping 
from tensorflow.keras.optimizers  import SGD
import matplotlib.pyplot as plt
import numpy as np
//////////////////////////////////////////////////////
x_train = np.zeros((600,32,32,3))
x_test = np.zeros((100,32,32,3))
y_train = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]
y_test = [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9]
/////////////////
for i in range(60):
  x_train[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Banh_cuon/'+ str(i+1) +'.jfif', target_size=(32, 32))
  x_train[i] = img_to_array(x_train[i]) 
///////////////////
for i in range(60,120):
  x_train[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Banh_xeo/'+ str(i-59) +'.jfif', target_size=(32, 32))
  x_train[i] = img_to_array(x_train[i]) 
///////////////////
for i in range(120,180):
  x_train[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Bo_la_lot/'+ str(i-119) +'.jfif', target_size=(32, 32))
  x_train[i] = img_to_array(x_train[i]) 
////////////////////
for i in range(180,240):
  x_train[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Bun_bo/'+ str(i-179) +'.jfif', target_size=(32, 32))
  x_train[i] = img_to_array(x_train[i]) 
/////////////////////
for i in range(240,300):
  x_train[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Com_tam/'+ str(i-239) +'.jfif', target_size=(32, 32))
  x_train[i] = img_to_array(x_train[i]) 
////////////////////
for i in range(300,360):
  x_train[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Ga_chien/'+ str(i-299) +'.jfif', target_size=(32, 32))
  x_train[i] = img_to_array(x_train[i]) 
/////////////////////////
for i in range(360,420):
  x_train[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Mi_xao_bo/'+ str(i-359) +'.jfif', target_size=(32, 32))
  x_train[i] = img_to_array(x_train[i]) 
//////////////////////////
for i in range(420,480):
  x_train[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Muc_rim_me/'+ str(i-419) +'.jfif', target_size=(32, 32))
  x_train[i] = img_to_array(x_train[i]) 
/////////////////////////
for i in range(480,540):
  x_train[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Pho_ga/'+ str(i-479) +'.jfif', target_size=(32, 32))
  x_train[i] = img_to_array(x_train[i]) 
///////////////////////
for i in range(540,600):
  x_train[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Thit_kho_hot_vit/'+ str(i-539) +'.jfif', target_size=(32, 32))
  x_train[i] = img_to_array(x_train[i]) 
//////////////////////
for i in range(10):
  x_test[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Banh_cuon/'+ str(i+61) +'.jfif', target_size=(32, 32))
  x_test[i] = img_to_array(x_test[i]) 
///////////////////
for i in range(10,20):
  x_test[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Banh_xeo/'+ str(i+51) +'.jfif', target_size=(32, 32))
  x_test[i] = img_to_array(x_test[i]) 
////////////////////
for i in range(20,30):
  x_test[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Bo_la_lot/'+ str(i+41) +'.jfif', target_size=(32, 32))
  x_test[i] = img_to_array(x_test[i]) 
/////////////////////
for i in range(30,40):
  x_test[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Bun_bo/'+ str(i+31) +'.jfif', target_size=(32, 32))
  x_test[i] = img_to_array(x_test[i]) 
/////////////////////
for i in range(40,50):
  x_test[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Com_tam/'+ str(i+21) +'.jfif', target_size=(32, 32))
  x_test[i] = img_to_array(x_test[i]) 
//////////////////////
for i in range(50,60):
  x_test[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Ga_chien/'+ str(i+11) +'.jfif', target_size=(32, 32))
  x_test[i] = img_to_array(x_test[i]) 
///////////////////////
for i in range(60,70):
  x_test[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Mi_xao_bo/'+ str(i+1) +'.jfif', target_size=(32, 32))
  x_test[i] = img_to_array(x_test[i]) 
///////////////////////
for i in range(70,80):
  x_test[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Muc_rim_me/'+ str(i-9) +'.jfif', target_size=(32, 32))
  x_test[i] = img_to_array(x_test[i]) 
//////////////////////////
for i in range(80,90):
  x_test[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Pho_ga/'+ str(i-19) +'.jfif', target_size=(32, 32))
  x_test[i] = img_to_array(x_test[i]) 
/////////////////////////
for i in range(90,100):
  x_test[i] = load_img('/content/drive/MyDrive/Colab Notebooks/Trí tuệ nhân tạo/Thit_kho_hot_vit/'+ str(i-29) +'.jfif', target_size=(32, 32))
  x_test[i] = img_to_array(x_test[i]) 
//////////////////////
x_train = x_train.reshape(600,32,32,3)
x_test = x_test.reshape(100,32,32,3)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

x_train/=255 # Chia từ ảnh màu thành ảnh xám
x_test/=255

y_train = np_utils.to_categorical(y_train,10)
y_test = np_utils.to_categorical(y_test,10)
////////////////////
# Mô hình VGG16
from keras.applications.vgg16 import VGG16
from keras.models import Model
model = VGG16(include_top = False,input_shape=(32,32,3))
for layers in model.layers :
  layers.trainable = False

flat1 = Flatten()(model.layers[-1].output)
class1 = Dense(128, activation='relu', kernel_initializer='he_uniform')(flat1)
output = Dense(6, activation='sigmoid')(class1)
model = Model(inputs = model.inputs,
              outputs = output)

opt=SGD(learning_rate=0.01,momentum=0.9)
model.compile(loss='categorical_crossentropy',optimizer=opt, metrics=['accuracy'])
history = model.fit(x_train,y_train,epochs=100,batch_size=64,validation_data=(x_test,y_test),verbose=1)
model.save('10_Disk_Recognization.h5')
////////////////////////
model = Sequential()
###############################################
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3))) # 32 lần sử dụng bộ lọc, bộ lọc có kích thước là 3x3  
# khai báo bộ lọc kernel và padding là same nghĩa là ảnh trước khi lọc và sau khi lọc phải cùng kích thước
model.add(BatchNormalization())
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.2))
##############################################
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())	
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.3))
###############################################
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())	
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.4))
###############################################
model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(BatchNormalization())	
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.5))
##############################################
model.add(Flatten())
model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))
model.add(BatchNormalization())
model.add(Dropout(0.5))	
model.add(Dense(10, activation='sigmoid'))
model.summary()
/////////////////////////////////
opt=SGD(learning_rate=0.01,momentum=0.9)
model.compile(loss='categorical_crossentropy',optimizer=opt, metrics=['accuracy'])
history = model.fit(x_train,y_train,epochs=500,batch_size=64,validation_data=(x_test,y_test),verbose=1)
model.save('10_Disk_Recognization.h5')
////////////////////////////////
score = model.evaluate(x_test,y_test,verbose=0)
print('Test loss:', score[0])
print('Test accuracy', score[1])
  File "/tmp/ipykernel_20/3249298438.py", line 18
    //////////////////////////////////////////////////////
     ^
SyntaxError: invalid syntax
